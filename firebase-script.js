// Firebase Ïó∞Îèô Ïä§ÌÅ¨Î¶ΩÌä∏
let posts = [];
let postIdCounter = 1;
let currentPage = 'home';
let currentPostId = null;

// FirebaseÍ∞Ä Î°úÎìúÎêòÍ∏∞Î•º Í∏∞Îã§Î¶º
function waitForFirebase() {
    return new Promise((resolve) => {
        const checkFirebase = () => {
            if (window.db && window.firestore && window.analytics) {
                resolve();
            } else {
                setTimeout(checkFirebase, 100);
            }
        };
        checkFirebase();
    });
}

// Analytics Ïù¥Î≤§Ìä∏ Î°úÍπÖ Ìï®Ïàò
function logAnalyticsEvent(eventName, parameters = {}) {
    if (window.analytics && window.analyticsUtils) {
        window.analyticsUtils.logEvent(window.analytics, eventName, parameters);
    }
}

document.addEventListener('DOMContentLoaded', async function() {
    // Firebase Î°úÎìú ÎåÄÍ∏∞
    await waitForFirebase();
    
    const floatingBtn = document.getElementById('floatingBtn');
    const backBtn = document.getElementById('backBtn');
    const detailBackBtn = document.getElementById('detailBackBtn');
    const submitBtn = document.getElementById('submitBtn');
    const modal = document.getElementById('shareModal');
    const closeModal = document.querySelector('.close');

    // ÌîåÎ°úÌåÖ Î≤ÑÌäº ÌÅ¥Î¶≠ - Í∏Ä ÏûëÏÑ± ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    floatingBtn.addEventListener('click', function() {
        showWritePage();
    });

    // Îí§Î°ú Í∞ÄÍ∏∞ Î≤ÑÌäºÎì§
    backBtn.addEventListener('click', function() {
        showHomePage();
    });

    detailBackBtn.addEventListener('click', function() {
        showHomePage();
    });

    // Í∏Ä ÏûëÏÑ± ÏôÑÎ£å Î≤ÑÌäº
    submitBtn.addEventListener('click', function() {
        createPost();
    });

    // Î™®Îã¨ Îã´Í∏∞
    closeModal.addEventListener('click', function() {
        modal.style.display = 'none';
    });

    window.addEventListener('click', function(e) {
        if (e.target === modal) {
            modal.style.display = 'none';
        }
    });

    // ÎåìÍ∏Ä ÏûëÏÑ± Í∏∞Îä•
    document.getElementById('commentSubmitBtn').addEventListener('click', function() {
        addCommentToDetail();
    });

    document.getElementById('commentInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            addCommentToDetail();
        }
    });

    loadPostsFromFirebase();
    
    // ÌéòÏù¥ÏßÄ Î∞©Î¨∏ Ïù¥Î≤§Ìä∏ Î°úÍπÖ
    logAnalyticsEvent('page_view', {
        page_title: 'Viecoday Story Home',
        page_location: window.location.href
    });
});

function showHomePage() {
    currentPage = 'home';
    document.getElementById('writePage').style.display = 'none';
    document.getElementById('detailPage').style.display = 'none';
    document.querySelector('.container').style.display = 'block';
    document.getElementById('floatingBtn').style.display = 'flex';
}

function showWritePage() {
    currentPage = 'write';
    document.getElementById('writePage').style.display = 'flex';
    document.getElementById('detailPage').style.display = 'none';
    document.querySelector('.container').style.display = 'none';
    document.getElementById('floatingBtn').style.display = 'none';
    
    // ÏûÖÎ†• ÌïÑÎìú Ï¥àÍ∏∞Ìôî
    document.getElementById('postTitle').value = '';
    document.getElementById('postContent').value = '';
    
    // Í∏Ä ÏûëÏÑ± ÌéòÏù¥ÏßÄ ÏßÑÏûÖ Ïù¥Î≤§Ìä∏
    logAnalyticsEvent('page_view', {
        page_title: 'Write Post',
        page_location: window.location.href + '#write'
    });
}

function showDetailPage(postId) {
    currentPage = 'detail';
    currentPostId = postId;
    document.getElementById('writePage').style.display = 'none';
    document.getElementById('detailPage').style.display = 'flex';
    document.querySelector('.container').style.display = 'none';
    document.getElementById('floatingBtn').style.display = 'none';
    
    renderPostDetail(postId);
    
    // Í∏Ä ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ ÏßÑÏûÖ Ïù¥Î≤§Ìä∏
    const post = posts.find(p => p.id === postId);
    logAnalyticsEvent('select_content', {
        content_type: 'post',
        item_id: postId,
        content_title: post ? post.title : 'Unknown'
    });
}

async function createPost() {
    const title = document.getElementById('postTitle').value;
    const content = document.getElementById('postContent').value;
    
    if (title.trim() === '' || content.trim() === '') {
        alert('Ï†úÎ™©Í≥º ÎÇ¥Ïö©ÏùÑ Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
        return;
    }

    const post = {
        title: title,
        content: content,
        author: 'ÏùµÎ™Ö',
        date: new Date().toISOString(),
        likes: 0,
        liked: false,
        comments: []
    };

    try {
        // FirebaseÏóê Ï†ÄÏû•
        const docRef = await window.firestore.addDoc(
            window.firestore.collection(window.db, 'posts'), 
            post
        );
        console.log('Í∏ÄÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§:', docRef.id);
        
        // Í∏Ä ÏûëÏÑ± Ïù¥Î≤§Ìä∏ Î°úÍπÖ
        logAnalyticsEvent('post_create', {
            content_type: 'post',
            content_title: title,
            content_length: content.length
        });
        
        showHomePage();
        loadPostsFromFirebase(); // ÏÉàÎ°úÍ≥†Ïπ®
    } catch (error) {
        console.error('Í∏Ä Ï†ÄÏû• Ïã§Ìå®:', error);
        alert('Í∏Ä Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
}

async function loadPostsFromFirebase() {
    try {
        const q = window.firestore.query(
            window.firestore.collection(window.db, 'posts'),
            window.firestore.orderBy('date', 'desc')
        );
        
        const querySnapshot = await window.firestore.getDocs(q);
        posts = [];
        
        querySnapshot.forEach((doc) => {
            const data = doc.data();
            posts.push({
                id: doc.id,
                ...data,
                date: new Date(data.date).toLocaleString('ko-KR')
            });
        });
        
        renderPosts();
    } catch (error) {
        console.error('Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
        // Ïã§Ìå® Ïãú ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        loadSamplePosts();
    }
}

function renderPosts() {
    const postsContainer = document.getElementById('posts');
    postsContainer.innerHTML = '';

    posts.forEach(post => {
        const postElement = document.createElement('div');
        postElement.className = 'post';
        
        postElement.innerHTML = `
            <div class="post-header">
                <div class="post-author">
                    <div class="author-avatar">
                        ${post.author.charAt(0)}
                    </div>
                    <div class="author-info">
                        <div class="author-name">${post.author}</div>
                        <div class="post-date">${post.date}</div>
                    </div>
                </div>
            </div>
            <div class="post-content-area" onclick="showDetailPage('${post.id}')">
                <div class="post-title">${post.title}</div>
                <div class="post-content">${post.content}</div>
            </div>
            <div class="post-stats">
                <div class="stat-item like-btn ${post.liked ? 'liked' : ''}" onclick="event.stopPropagation(); toggleLikeFromList('${post.id}')">
                    <span>${post.liked ? '‚ù§Ô∏è' : '‚ô°'}</span>
                    <span>${post.likes}</span>
                </div>
                <div class="stat-item" onclick="showDetailPage('${post.id}')">
                    <span>üí¨</span>
                    <span>${post.comments ? post.comments.length : 0}</span>
                </div>
            </div>
        `;
        postsContainer.appendChild(postElement);
    });
}

async function toggleLikeFromList(postId) {
    const post = posts.find(p => p.id === postId);
    if (post) {
        if (post.liked) {
            post.likes--;
            post.liked = false;
        } else {
            post.likes++;
            post.liked = true;
        }
        
        try {
            // Firebase ÏóÖÎç∞Ïù¥Ìä∏
            await window.firestore.updateDoc(
                window.firestore.doc(window.db, 'posts', postId),
                {
                    likes: post.likes,
                    liked: post.liked
                }
            );
            
            // Ï¢ãÏïÑÏöî Ïù¥Î≤§Ìä∏ Î°úÍπÖ
            logAnalyticsEvent('like_post', {
                content_type: 'post',
                item_id: postId,
                action: post.liked ? 'like' : 'unlike'
            });
            
            renderPosts();
        } catch (error) {
            console.error('Ï¢ãÏïÑÏöî ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
        }
    }
}

function renderPostDetail(postId) {
    const post = posts.find(p => p.id === postId);
    if (!post) return;

    const postDetailElement = document.getElementById('postDetail');
    postDetailElement.innerHTML = `
        <div class="post-header">
            <div class="post-author">
                <div class="author-avatar">
                    ${post.author.charAt(0)}
                </div>
                <div class="author-info">
                    <div class="author-name">${post.author}</div>
                    <div class="post-date">${post.date}</div>
                </div>
            </div>
        </div>
        <div class="post-title">${post.title}</div>
        <div class="post-content">${post.content}</div>
    `;

    // Ïï°ÏÖò Î≤ÑÌäº ÏóÖÎç∞Ïù¥Ìä∏
    const likeBtn = document.getElementById('detailLikeBtn');
    const commentBtn = document.getElementById('detailCommentBtn');
    const shareBtn = document.getElementById('detailShareBtn');

    likeBtn.innerHTML = `
        <span class="icon">${post.liked ? '‚ù§Ô∏è' : '‚ô°'}</span>
        <span class="count">${post.likes}</span>
    `;
    likeBtn.className = `action-btn ${post.liked ? 'liked' : ''}`;
    likeBtn.onclick = () => toggleDetailLike(postId);

    commentBtn.innerHTML = `
        <span class="icon">üí¨</span>
        <span class="count">${post.comments ? post.comments.length : 0}</span>
    `;

    shareBtn.onclick = () => openShareModal(postId);

    // ÎåìÍ∏Ä Î™©Î°ù Î†åÎçîÎßÅ
    renderDetailComments(post.comments || []);
}

function renderDetailComments(comments) {
    const commentsList = document.getElementById('detailCommentsList');
    commentsList.innerHTML = comments.map(comment => `
        <div class="comment">
            <div class="comment-header">
                <span class="comment-author">ÏùµÎ™Ö</span>
                <span class="comment-date">${comment.date}</span>
            </div>
            <div class="comment-content">${comment.content}</div>
            <div class="comment-actions">
                <button class="comment-like-btn ${comment.liked ? 'liked' : ''}" onclick="toggleCommentLike('${comment.postId}', '${comment.id}')">
                    <span>Ï¢ãÏïÑÏöî</span>
                    <span>${comment.likes}</span>
                </button>
            </div>
        </div>
    `).join('');
}

async function toggleDetailLike(postId) {
    const post = posts.find(p => p.id === postId);
    if (post) {
        if (post.liked) {
            post.likes--;
            post.liked = false;
        } else {
            post.likes++;
            post.liked = true;
        }
        
        try {
            await window.firestore.updateDoc(
                window.firestore.doc(window.db, 'posts', postId),
                {
                    likes: post.likes,
                    liked: post.liked
                }
            );
            renderPosts();
            renderPostDetail(postId);
        } catch (error) {
            console.error('Ï¢ãÏïÑÏöî ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
        }
    }
}

async function addCommentToDetail() {
    const commentInput = document.getElementById('commentInput');
    const commentContent = commentInput.value.trim();
    
    if (commentContent === '') {
        alert('ÎåìÍ∏Ä ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
        return;
    }

    const post = posts.find(p => p.id === currentPostId);
    if (!post) return;

    const comment = {
        id: Date.now().toString(),
        postId: currentPostId,
        content: commentContent,
        date: new Date().toLocaleString('ko-KR'),
        likes: 0,
        liked: false
    };

    if (!post.comments) post.comments = [];
    post.comments.push(comment);
    commentInput.value = '';
    
    try {
        await window.firestore.updateDoc(
            window.firestore.doc(window.db, 'posts', currentPostId),
            {
                comments: post.comments
            }
        );
        
        // ÎåìÍ∏Ä ÏûëÏÑ± Ïù¥Î≤§Ìä∏ Î°úÍπÖ
        logAnalyticsEvent('comment_create', {
            content_type: 'comment',
            post_id: currentPostId,
            comment_length: commentContent.length
        });
        
        renderPosts();
        renderPostDetail(currentPostId);
    } catch (error) {
        console.error('ÎåìÍ∏Ä Ï†ÄÏû• Ïã§Ìå®:', error);
    }
}

function openShareModal(postId) {
    const modal = document.getElementById('shareModal');
    modal.style.display = 'block';
    modal.setAttribute('data-post-id', postId);
}

function shareToFacebook() {
    const postId = document.getElementById('shareModal').getAttribute('data-post-id');
    const post = posts.find(p => p.id == postId);
    const url = encodeURIComponent(window.location.href);
    const text = encodeURIComponent(`${post.title} - ${post.content.substring(0, 100)}...`);
    window.open(`https://www.facebook.com/sharer/sharer.php?u=${url}&quote=${text}`, '_blank');
}

function shareToTwitter() {
    const postId = document.getElementById('shareModal').getAttribute('data-post-id');
    const post = posts.find(p => p.id == postId);
    const url = encodeURIComponent(window.location.href);
    const text = encodeURIComponent(`${post.title} - ${post.content.substring(0, 100)}...`);
    window.open(`https://twitter.com/intent/tweet?url=${url}&text=${text}`, '_blank');
}

function copyLink() {
    const url = window.location.href;
    navigator.clipboard.writeText(url).then(() => {
        alert('ÎßÅÌÅ¨Í∞Ä Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§!');
        document.getElementById('shareModal').style.display = 'none';
    }).catch(() => {
        alert('ÎßÅÌÅ¨ Î≥µÏÇ¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    });
}

function loadSamplePosts() {
    // ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ (Firebase Ïó∞Í≤∞ Ïã§Ìå® Ïãú Î∞±ÏóÖ)
    const samplePosts = [
        {
            id: 'sample1',
            title: "Firebase Ïó∞Í≤∞ Ï§ë...",
            content: "Firebase Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ïó∞Í≤∞ÌïòÎäî Ï§ëÏûÖÎãàÎã§. Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî.",
            author: "ÏãúÏä§ÌÖú",
            date: new Date().toLocaleString('ko-KR'),
            likes: 0,
            liked: false,
            comments: []
        }
    ];

    posts = samplePosts;
    renderPosts();
}